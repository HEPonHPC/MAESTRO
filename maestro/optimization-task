#!/usr/bin/env python3
import argparse
import json
from json import encoder
encoder.FLOAT_REPR = lambda o: format(o, '.16f')
import numpy as np
import pprint
import os

import sys
from maestro import Settings,OutputLevel,DiskUtil,InterpolationSample,\
    ModelConstruction,Fstructure,TrAmmendment
from maestro.mpi4py_ import MPI_
class OptimizaitionTask(object):
    def __init__(self, working_dir=None,algorithm_parameters=None,config=None,
                 parameter_file="params.dat",run_fidelity_file="run_fidelity.dat",
                 at_fidelity_file="at_fidelity.dat"):
        self.state = Settings(working_dir,algorithm_parameters,config)
        self.parameter_file = parameter_file
        self.run_fidelity_file = run_fidelity_file
        self.at_fidelity_file = at_fidelity_file
        if self.state.mc_call_on_workflow:
            import pyhenson as h
            self.henson = h

    def check_whether_to_stop(self):
        from maestro import MPI_
        comm = MPI_.COMM_WORLD
        rank = comm.Get_rank()
        if self.state.algorithm_status.status_val != 0:
            if rank == 0:
                self.state.save(to_log=True)
                print("\nThe algorithm stopped with exit code {} because:".format(self.state.algorithm_status.status_val))
                print("{} : {}\n".format(self.state.algorithm_status.status_val,self.state.algorithm_status.status_def))
                print("If the problem is abnormal or needs more investigation, please contact the "
                      "author Mohan Krishnamoorthy at mkrishnamoorthy2425@gmail.com\n")
            sys.stdout.flush()
            sys.exit(self.state.algorithm_status.status_val)

    def run(self):
        self.check_whether_to_stop()
        if self.state.next_step == "ops_start":
            self.ops_start()
        else: self.mc_caller_interpretor_resolver(next_step=self.state.next_step)
        self.check_whether_to_stop()

    def ops_start(self):
        # meta_data_file = self.state.working_directory.get_log_path(
        #     "parameter_metadata_1_k{}.json".format(self.state.k))
        self.state.set_start_time()
        self.initialize()
        self.mc_caller_interpretor_resolver(next_step="ops_sample")
        self.check_whether_to_stop()

    def ops_sample(self):
        from maestro import MPI_
        comm = MPI_.COMM_WORLD
        rank = comm.Get_rank()
        if self.state.k == 0:
            # Move RUN folder to appropriate folder
            oldparamdir  = self.state.working_directory.get_log_path("MC_RUN")
            newparamdir  = self.state.working_directory.get_log_path("MC_RUN_1_k{}".format(self.state.k))
            if rank == 0:
                DiskUtil.copyanything(oldparamdir,newparamdir)

        # meta_data_file = self.state.working_directory.get_log_path(
        #     "parameter_metadata_Np_k{}.json".format(self.state.k))
        sample_obj = InterpolationSample(self.state,self.parameter_file,self.run_fidelity_file)
        sample_obj.build_interpolation_points()

        self.mc_caller_interpretor_resolver(next_step="ops_model")
        self.check_whether_to_stop()

    def ops_model(self):
        from maestro import MPI_
        comm = MPI_.COMM_WORLD
        rank = comm.Get_rank()
        oldparamdir  = self.state.working_directory.get_log_path("MC_RUN")
        newparamdir  = self.state.working_directory.get_log_path("MC_RUN_Np_k{}".format(self.state.k))
        if rank == 0:
            DiskUtil.copyanything(oldparamdir,newparamdir)
        model = ModelConstruction(self.state,newparamdir)
        model.construct_models()
        self.check_whether_to_stop()
        f_structure = Fstructure(self.state)
        f_structure.check_close_to_optimal_conditions()
        self.check_whether_to_stop()
        if self.state.close_to_min_condition: self.ops_tr()
        f_structure_subproblem_result_file = self.state.working_directory.get_log_path("f_structure_subproblem_result_k{}.json".format(self.state.k))
        f_structure.solve_f_structure_subproblem(f_structure_subproblem_result_file)
        # meta_data_file = self.state.working_directory.get_log_path(
        #     "parameter_metadata_1_k{}.json".format(self.state.k + 1))

        comm = MPI_().COMM_WORLD
        rank = comm.Get_rank()
        comm.barrier()
        new_param = None
        if rank == 0:
            with open(f_structure_subproblem_result_file,'r') as f:
                ds = json.load(f)
            new_param = ds['x']
        new_param = comm.bcast(new_param, root=0)
        param_meta_data = None
        if rank == 0:
            expected_folder_name = self.state.working_directory.get_log_path("MC_RUN_1_k{}".format(self.state.k+1))
            param_meta_data = self.state.mc_object.write_param(parameters=[new_param],
                                             parameter_names=self.state.param_names,
                                             at_fidelities=[0],
                                             run_fidelities=[self.state.fidelity],
                                             mc_run_folder=self.state.mc_run_folder_path,
                                             expected_folder_name=expected_folder_name,
                                             fnamep=self.parameter_file,
                                             fnamerf=self.run_fidelity_file)
        param_meta_data = comm.bcast(param_meta_data,root=0)
        self.state.update_parameter_metadata(self.state.k+1, "1", param_ds=param_meta_data)
        self.mc_caller_interpretor_resolver(next_step="ops_tr")
        self.check_whether_to_stop()

    def ops_tr(self):
        from maestro import MPI_
        comm = MPI_.COMM_WORLD
        rank = comm.Get_rank()
        oldparamdir  = self.state.working_directory.get_log_path("MC_RUN")
        newparamdir_kp1  = self.state.working_directory.get_log_path("MC_RUN_1_k{}".format(self.state.k+1))
        if rank == 0:
            if not self.state.close_to_min_condition:
                DiskUtil.copyanything(oldparamdir,newparamdir_kp1)
        newparamdir_k = self.state.working_directory.get_log_path("MC_RUN_1_k{}".format(self.state.k))
        # meta_data_file_kp1 = self.state.working_directory.get_log_path(
        #     "parameter_metadata_1_k{}.json".format(self.state.k + 1))
        # meta_data_file_k = self.state.working_directory.get_log_path(
        #     "__parameter_metadata_1_k{}.json".format(self.state.k))

        tr_ammend = TrAmmendment(self.state,newparamdir_k,newparamdir_kp1)
        tr_ammend.perform_tr_update()
        tr_ammend.check_stopping_conditions()
        if self.state.algorithm_status.status_val == 0:
            self.state.save(to_log=True)
            self.state.increment_k()
            self.ops_sample()
        else:
            self.check_whether_to_stop()

    def initialize(self):
        debug = OutputLevel.is_debug(self.state.output_level)
        comm = MPI_.COMM_WORLD
        rank = comm.Get_rank()
        comm.barrier()
        if rank==0 and debug:
            print("\n#####################################")
            print("Initially")
            print("#####################################")
            print("\Delta_1 \t= {}".format(self.state.tr_radius))
            print("N_p \t\t= {}".format(self.state.N_p))
            print("dim \t\t= {}".format(self.state.dim))
            print("P_1 \t\t= {}".format(self.state.tr_center))
            print("Min Phy bnd \t= {}".format(self.state.min_param_bounds))
            print("Min Phy bnd \t= {}".format(self.state.max_param_bounds))

        param_meta_data = None
        if rank == 0:
            expected_folder_name = self.state.working_directory.get_log_path("MC_RUN_1_k{}".format(self.state.k))
            param_meta_data = self.state.mc_object.write_param(parameters=[self.state.tr_center],
                                             parameter_names=self.state.param_names,
                                             at_fidelities=[0],
                                             run_fidelities=[self.state.fidelity],
                                             mc_run_folder=self.state.mc_run_folder_path,
                                             expected_folder_name = expected_folder_name,
                                             fnamep=self.parameter_file,
                                             fnamerf=self.run_fidelity_file)
        param_meta_data = comm.bcast(param_meta_data,root=0)
        self.state.update_parameter_metadata(self.state.k,"1",param_ds=param_meta_data)


    def mc_caller_interpretor_resolver(self, next_step:str):
        # Run MC
        if self.state.mc_call_on_workflow:
            try:
                self.state.save(next_step=next_step)
                self.henson.yield_()
            except:
                raise Exception("Workflow yield failed")
        elif self.state.mc_call_using_script_run:
            if self.state.mc_ran:
                self.state.change_mc_ran(False)
            else:
                self.state.change_mc_ran(True)
                self.state.save(next_step=next_step)
                #todo check if this works on script call. Otherwise change to number and read next_step from state
                sys.exit(0)
        elif self.state.mc_call_using_function_call:
            self.state.mc_object.run_mc()

        # Merge statistics and get max sigma
        max_sigma = self.state.mc_object.merge_statistics_and_get_max_sigma()

        # Update current fid (run_fid+at_fid) && get current fidelities
        type = "Np" if next_step == "ops_model" else "1"
        k = self.state.k+1 if next_step == "ops_tr" else self.state.k
        current_fidelities = self.state.mc_object.get_updated_current_fidelities(self.state.get_paramerter_metadata(k,type))
        self.state.update_fidelity(max(current_fidelities))
        self.state.update_simulation_budget_used(sum(self.state.mc_object.get_run_fidelity_from_metadata(
                                                        self.state.get_paramerter_metadata(k, type)
                                                        )))
        bound = self.state.kappa*(self.state.tr_radius**2)

        new_fidelities = []
        for cf in current_fidelities:
            if max_sigma is None or self.state.usefixedfidelity:
                nf = 0
            elif max_sigma > bound:
                diff_sigma = max_sigma - bound
                nf = int(np.ceil((cf/max_sigma)*diff_sigma))
                nf = 10**np.ceil(np.log10(nf))
                # nf = 1/(diff_sigma**2)
                nf = max(self.state.min_fidelity,nf)
                if cf + nf > self.state.max_fidelity:
                    nf = self.state.max_fidelity - cf
            else:
                nf = 0
            new_fidelities.append(nf)
        # pprint.pprint(new_fidelities)
        self.state.mc_object.write_fidelity_to_metadata_and_directory(self.state.get_paramerter_metadata(k,type),
                                                                      current_fidelities,
                                                                      metadata_file_key="at fidelity",
                                                                      fnamef="at_fidelity.dat")
        self.state.mc_object.write_fidelity_to_metadata_and_directory(self.state.get_paramerter_metadata(k,type),
                                                                      new_fidelities)
        if sum(new_fidelities) >0:
            self.mc_caller_interpretor_resolver(next_step)
        else:
            method_to_call = getattr(self,next_step)
            method_to_call()

class SaneFormatter(argparse.RawTextHelpFormatter,
                    argparse.ArgumentDefaultsHelpFormatter):
    """
    Helper class for better formatting of the script usage.
    """
    pass

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Run the MF-STRO-DF algorithm',
                                     formatter_class=SaneFormatter)
    parser.add_argument("-a", dest="ALGOPARAMS", type=str, default=None,
                        help="Algorithm Parameters (JSON) location")
    parser.add_argument("-c", dest="CONFIG", type=str, default=None,
                        help="Config file (JSON) location")
    parser.add_argument("-d", dest="WORKINGDIR", type=str, default=None,
                        help="Working Directory")
    args = parser.parse_args()

    comm = MPI_.COMM_WORLD
    rank = comm.Get_rank()
    opt_task = OptimizaitionTask(args.WORKINGDIR,args.ALGOPARAMS,args.CONFIG)
    if rank == 0 and opt_task.state.next_step == "ops_start":
        DiskUtil.remove_directory(os.path.join(args.WORKINGDIR,"log"))
        os.makedirs(os.path.join(args.WORKINGDIR,"log"),exist_ok=False)
        os.makedirs(os.path.join(args.WORKINGDIR,"conf"),exist_ok=True)

    MPI_.print_MPI_message()
    opt_task.run()
